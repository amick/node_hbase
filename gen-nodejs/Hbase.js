//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./Hbase_types');
//HELPER FUNCTIONS AND STRUCTURES

Hbase_enableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_enableTable_args.prototype = {};
Hbase_enableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_enableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_enableTable_result.prototype = {};
Hbase_enableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_enableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_enableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_disableTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_disableTable_args.prototype = {};
Hbase_disableTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_disableTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_disableTable_result.prototype = {};
Hbase_disableTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_disableTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_disableTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_isTableEnabled_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_isTableEnabled_args.prototype = {};
Hbase_isTableEnabled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_isTableEnabled_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_isTableEnabled_result.prototype = {};
Hbase_isTableEnabled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_isTableEnabled_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_isTableEnabled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_compact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_compact_args.prototype = {};
Hbase_compact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeString(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_compact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_compact_result.prototype = {};
Hbase_compact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_compact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_compact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_majorCompact_args = function(args) {
  this.tableNameOrRegionName = null;
  if (args) {
    if (args.tableNameOrRegionName !== undefined) {
      this.tableNameOrRegionName = args.tableNameOrRegionName;
    }
  }
};
Hbase_majorCompact_args.prototype = {};
Hbase_majorCompact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableNameOrRegionName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_args');
  if (this.tableNameOrRegionName !== null && this.tableNameOrRegionName !== undefined) {
    output.writeFieldBegin('tableNameOrRegionName', Thrift.Type.STRING, 1);
    output.writeString(this.tableNameOrRegionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_majorCompact_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_majorCompact_result.prototype = {};
Hbase_majorCompact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_majorCompact_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_majorCompact_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableNames_args = function(args) {
};
Hbase_getTableNames_args.prototype = {};
Hbase_getTableNames_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableNames_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getTableNames_result.prototype = {};
Hbase_getTableNames_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.success = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString();
          this.success.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableNames_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableNames_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter41 in this.success)
    {
      if (this.success.hasOwnProperty(iter41))
      {
        iter41 = this.success[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getColumnDescriptors_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getColumnDescriptors_args.prototype = {};
Hbase_getColumnDescriptors_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getColumnDescriptors_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getColumnDescriptors_result.prototype = {};
Hbase_getColumnDescriptors_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size42 = 0;
        var _rtmp346;
        this.success = {};
        var _ktype43 = 0;
        var _vtype44 = 0;
        _rtmp346 = input.readMapBegin();
        _ktype43 = _rtmp346.ktype;
        _vtype44 = _rtmp346.vtype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var key48 = null;
          var val49 = null;
          key48 = input.readString();
          val49 = new ttypes.ColumnDescriptor();
          val49.read(input);
          this.success[key48] = val49;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getColumnDescriptors_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getColumnDescriptors_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.success));
    for (var kiter50 in this.success)
    {
      if (this.success.hasOwnProperty(kiter50))
      {
        var viter51 = this.success[kiter50];
        output.writeString(kiter50);
        viter51.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableRegions_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_getTableRegions_args.prototype = {};
Hbase_getTableRegions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getTableRegions_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getTableRegions_result.prototype = {};
Hbase_getTableRegions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.success = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new ttypes.TRegionInfo();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getTableRegions_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getTableRegions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success)
    {
      if (this.success.hasOwnProperty(iter59))
      {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_createTable_args = function(args) {
  this.tableName = null;
  this.columnFamilies = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.columnFamilies !== undefined) {
      this.columnFamilies = args.columnFamilies;
    }
  }
};
Hbase_createTable_args.prototype = {};
Hbase_createTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.columnFamilies = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new ttypes.ColumnDescriptor();
          elem66.read(input);
          this.columnFamilies.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.columnFamilies !== null && this.columnFamilies !== undefined) {
    output.writeFieldBegin('columnFamilies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.columnFamilies.length);
    for (var iter67 in this.columnFamilies)
    {
      if (this.columnFamilies.hasOwnProperty(iter67))
      {
        iter67 = this.columnFamilies[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_createTable_result = function(args) {
  this.io = null;
  this.ia = null;
  this.exist = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args instanceof ttypes.AlreadyExists) {
    this.exist = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
    if (args.exist !== undefined) {
      this.exist = args.exist;
    }
  }
};
Hbase_createTable_result.prototype = {};
Hbase_createTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.exist = new ttypes.AlreadyExists();
        this.exist.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_createTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_createTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  if (this.exist !== null && this.exist !== undefined) {
    output.writeFieldBegin('exist', Thrift.Type.STRUCT, 3);
    this.exist.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteTable_args = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
  }
};
Hbase_deleteTable_args.prototype = {};
Hbase_deleteTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteTable_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteTable_result.prototype = {};
Hbase_deleteTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteTable_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteTable_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_get_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_get_args.prototype = {};
Hbase_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size68 = 0;
        var _rtmp372;
        this.attributes = {};
        var _ktype69 = 0;
        var _vtype70 = 0;
        _rtmp372 = input.readMapBegin();
        _ktype69 = _rtmp372.ktype;
        _vtype70 = _rtmp372.vtype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var key74 = null;
          var val75 = null;
          key74 = input.readString();
          val75 = input.readString();
          this.attributes[key74] = val75;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter76 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter76))
      {
        var viter77 = this.attributes[kiter76];
        output.writeString(kiter76);
        output.writeString(viter77);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_get_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_get_result.prototype = {};
Hbase_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size78 = 0;
        var _rtmp382;
        this.success = [];
        var _etype81 = 0;
        _rtmp382 = input.readListBegin();
        _etype81 = _rtmp382.etype;
        _size78 = _rtmp382.size;
        for (var _i83 = 0; _i83 < _size78; ++_i83)
        {
          var elem84 = null;
          elem84 = new ttypes.TCell();
          elem84.read(input);
          this.success.push(elem84);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_get_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter85 in this.success)
    {
      if (this.success.hasOwnProperty(iter85))
      {
        iter85 = this.success[iter85];
        iter85.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVer_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.numVersions !== undefined) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getVer_args.prototype = {};
Hbase_getVer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.attributes = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var key92 = null;
          var val93 = null;
          key92 = input.readString();
          val93 = input.readString();
          this.attributes[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 4);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter94 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter94))
      {
        var viter95 = this.attributes[kiter94];
        output.writeString(kiter94);
        output.writeString(viter95);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVer_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getVer_result.prototype = {};
Hbase_getVer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.TCell();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVer_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVerTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.numVersions = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.numVersions !== undefined) {
      this.numVersions = args.numVersions;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getVerTs_args.prototype = {};
Hbase_getVerTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numVersions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size104 = 0;
        var _rtmp3108;
        this.attributes = {};
        var _ktype105 = 0;
        var _vtype106 = 0;
        _rtmp3108 = input.readMapBegin();
        _ktype105 = _rtmp3108.ktype;
        _vtype106 = _rtmp3108.vtype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var key110 = null;
          var val111 = null;
          key110 = input.readString();
          val111 = input.readString();
          this.attributes[key110] = val111;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.numVersions !== null && this.numVersions !== undefined) {
    output.writeFieldBegin('numVersions', Thrift.Type.I32, 5);
    output.writeI32(this.numVersions);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter112 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter112))
      {
        var viter113 = this.attributes[kiter112];
        output.writeString(kiter112);
        output.writeString(viter113);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getVerTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getVerTs_result.prototype = {};
Hbase_getVerTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = new ttypes.TCell();
          elem120.read(input);
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getVerTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getVerTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        iter121.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRow_args.prototype = {};
Hbase_getRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size122 = 0;
        var _rtmp3126;
        this.attributes = {};
        var _ktype123 = 0;
        var _vtype124 = 0;
        _rtmp3126 = input.readMapBegin();
        _ktype123 = _rtmp3126.ktype;
        _vtype124 = _rtmp3126.vtype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var key128 = null;
          var val129 = null;
          key128 = input.readString();
          val129 = input.readString();
          this.attributes[key128] = val129;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter130 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter130))
      {
        var viter131 = this.attributes[kiter130];
        output.writeString(kiter130);
        output.writeString(viter131);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRow_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRow_result.prototype = {};
Hbase_getRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.TRowResult();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRow_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumns_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowWithColumns_args.prototype = {};
Hbase_getRowWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.columns = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readString();
          this.columns.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size147 = 0;
        var _rtmp3151;
        this.attributes = {};
        var _ktype148 = 0;
        var _vtype149 = 0;
        _rtmp3151 = input.readMapBegin();
        _ktype148 = _rtmp3151.ktype;
        _vtype149 = _rtmp3151.vtype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var key153 = null;
          var val154 = null;
          key153 = input.readString();
          val154 = input.readString();
          this.attributes[key153] = val154;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter155 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter155))
      {
        iter155 = this.columns[iter155];
        output.writeString(iter155);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter156 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter156))
      {
        var viter157 = this.attributes[kiter156];
        output.writeString(kiter156);
        output.writeString(viter157);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumns_result.prototype = {};
Hbase_getRowWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size158 = 0;
        var _rtmp3162;
        this.success = [];
        var _etype161 = 0;
        _rtmp3162 = input.readListBegin();
        _etype161 = _rtmp3162.etype;
        _size158 = _rtmp3162.size;
        for (var _i163 = 0; _i163 < _size158; ++_i163)
        {
          var elem164 = null;
          elem164 = new ttypes.TRowResult();
          elem164.read(input);
          this.success.push(elem164);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter165 in this.success)
    {
      if (this.success.hasOwnProperty(iter165))
      {
        iter165 = this.success[iter165];
        iter165.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowTs_args.prototype = {};
Hbase_getRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size166 = 0;
        var _rtmp3170;
        this.attributes = {};
        var _ktype167 = 0;
        var _vtype168 = 0;
        _rtmp3170 = input.readMapBegin();
        _ktype167 = _rtmp3170.ktype;
        _vtype168 = _rtmp3170.vtype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var key172 = null;
          var val173 = null;
          key172 = input.readString();
          val173 = input.readString();
          this.attributes[key172] = val173;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter174 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter174))
      {
        var viter175 = this.attributes[kiter174];
        output.writeString(kiter174);
        output.writeString(viter175);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowTs_result.prototype = {};
Hbase_getRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.success = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = new ttypes.TRowResult();
          elem182.read(input);
          this.success.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter183 in this.success)
    {
      if (this.success.hasOwnProperty(iter183))
      {
        iter183 = this.success[iter183];
        iter183.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowWithColumnsTs_args.prototype = {};
Hbase_getRowWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.columns = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = input.readString();
          this.columns.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size191 = 0;
        var _rtmp3195;
        this.attributes = {};
        var _ktype192 = 0;
        var _vtype193 = 0;
        _rtmp3195 = input.readMapBegin();
        _ktype192 = _rtmp3195.ktype;
        _vtype193 = _rtmp3195.vtype;
        _size191 = _rtmp3195.size;
        for (var _i196 = 0; _i196 < _size191; ++_i196)
        {
          var key197 = null;
          var val198 = null;
          key197 = input.readString();
          val198 = input.readString();
          this.attributes[key197] = val198;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter199 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter199))
      {
        iter199 = this.columns[iter199];
        output.writeString(iter199);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter200 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter200))
      {
        var viter201 = this.attributes[kiter200];
        output.writeString(kiter200);
        output.writeString(viter201);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowWithColumnsTs_result.prototype = {};
Hbase_getRowWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size202 = 0;
        var _rtmp3206;
        this.success = [];
        var _etype205 = 0;
        _rtmp3206 = input.readListBegin();
        _etype205 = _rtmp3206.etype;
        _size202 = _rtmp3206.size;
        for (var _i207 = 0; _i207 < _size202; ++_i207)
        {
          var elem208 = null;
          elem208 = new ttypes.TRowResult();
          elem208.read(input);
          this.success.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter209 in this.success)
    {
      if (this.success.hasOwnProperty(iter209))
      {
        iter209 = this.success[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRows_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRows_args.prototype = {};
Hbase_getRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size210 = 0;
        var _rtmp3214;
        this.rows = [];
        var _etype213 = 0;
        _rtmp3214 = input.readListBegin();
        _etype213 = _rtmp3214.etype;
        _size210 = _rtmp3214.size;
        for (var _i215 = 0; _i215 < _size210; ++_i215)
        {
          var elem216 = null;
          elem216 = input.readString();
          this.rows.push(elem216);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size217 = 0;
        var _rtmp3221;
        this.attributes = {};
        var _ktype218 = 0;
        var _vtype219 = 0;
        _rtmp3221 = input.readMapBegin();
        _ktype218 = _rtmp3221.ktype;
        _vtype219 = _rtmp3221.vtype;
        _size217 = _rtmp3221.size;
        for (var _i222 = 0; _i222 < _size217; ++_i222)
        {
          var key223 = null;
          var val224 = null;
          key223 = input.readString();
          val224 = input.readString();
          this.attributes[key223] = val224;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter225 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter225))
      {
        iter225 = this.rows[iter225];
        output.writeString(iter225);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter226 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter226))
      {
        var viter227 = this.attributes[kiter226];
        output.writeString(kiter226);
        output.writeString(viter227);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRows_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRows_result.prototype = {};
Hbase_getRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size228 = 0;
        var _rtmp3232;
        this.success = [];
        var _etype231 = 0;
        _rtmp3232 = input.readListBegin();
        _etype231 = _rtmp3232.etype;
        _size228 = _rtmp3232.size;
        for (var _i233 = 0; _i233 < _size228; ++_i233)
        {
          var elem234 = null;
          elem234 = new ttypes.TRowResult();
          elem234.read(input);
          this.success.push(elem234);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRows_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter235 in this.success)
    {
      if (this.success.hasOwnProperty(iter235))
      {
        iter235 = this.success[iter235];
        iter235.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumns_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsWithColumns_args.prototype = {};
Hbase_getRowsWithColumns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size236 = 0;
        var _rtmp3240;
        this.rows = [];
        var _etype239 = 0;
        _rtmp3240 = input.readListBegin();
        _etype239 = _rtmp3240.etype;
        _size236 = _rtmp3240.size;
        for (var _i241 = 0; _i241 < _size236; ++_i241)
        {
          var elem242 = null;
          elem242 = input.readString();
          this.rows.push(elem242);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size243 = 0;
        var _rtmp3247;
        this.columns = [];
        var _etype246 = 0;
        _rtmp3247 = input.readListBegin();
        _etype246 = _rtmp3247.etype;
        _size243 = _rtmp3247.size;
        for (var _i248 = 0; _i248 < _size243; ++_i248)
        {
          var elem249 = null;
          elem249 = input.readString();
          this.columns.push(elem249);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size250 = 0;
        var _rtmp3254;
        this.attributes = {};
        var _ktype251 = 0;
        var _vtype252 = 0;
        _rtmp3254 = input.readMapBegin();
        _ktype251 = _rtmp3254.ktype;
        _vtype252 = _rtmp3254.vtype;
        _size250 = _rtmp3254.size;
        for (var _i255 = 0; _i255 < _size250; ++_i255)
        {
          var key256 = null;
          var val257 = null;
          key256 = input.readString();
          val257 = input.readString();
          this.attributes[key256] = val257;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter258 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter258))
      {
        iter258 = this.rows[iter258];
        output.writeString(iter258);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter259 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter259))
      {
        iter259 = this.columns[iter259];
        output.writeString(iter259);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter260 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter260))
      {
        var viter261 = this.attributes[kiter260];
        output.writeString(kiter260);
        output.writeString(viter261);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumns_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumns_result.prototype = {};
Hbase_getRowsWithColumns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size262 = 0;
        var _rtmp3266;
        this.success = [];
        var _etype265 = 0;
        _rtmp3266 = input.readListBegin();
        _etype265 = _rtmp3266.etype;
        _size262 = _rtmp3266.size;
        for (var _i267 = 0; _i267 < _size262; ++_i267)
        {
          var elem268 = null;
          elem268 = new ttypes.TRowResult();
          elem268.read(input);
          this.success.push(elem268);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumns_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter269 in this.success)
    {
      if (this.success.hasOwnProperty(iter269))
      {
        iter269 = this.success[iter269];
        iter269.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsTs_args.prototype = {};
Hbase_getRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size270 = 0;
        var _rtmp3274;
        this.rows = [];
        var _etype273 = 0;
        _rtmp3274 = input.readListBegin();
        _etype273 = _rtmp3274.etype;
        _size270 = _rtmp3274.size;
        for (var _i275 = 0; _i275 < _size270; ++_i275)
        {
          var elem276 = null;
          elem276 = input.readString();
          this.rows.push(elem276);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size277 = 0;
        var _rtmp3281;
        this.attributes = {};
        var _ktype278 = 0;
        var _vtype279 = 0;
        _rtmp3281 = input.readMapBegin();
        _ktype278 = _rtmp3281.ktype;
        _vtype279 = _rtmp3281.vtype;
        _size277 = _rtmp3281.size;
        for (var _i282 = 0; _i282 < _size277; ++_i282)
        {
          var key283 = null;
          var val284 = null;
          key283 = input.readString();
          val284 = input.readString();
          this.attributes[key283] = val284;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter285 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter285))
      {
        iter285 = this.rows[iter285];
        output.writeString(iter285);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter286 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter286))
      {
        var viter287 = this.attributes[kiter286];
        output.writeString(kiter286);
        output.writeString(viter287);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsTs_result.prototype = {};
Hbase_getRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.success = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = new ttypes.TRowResult();
          elem294.read(input);
          this.success.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter295 in this.success)
    {
      if (this.success.hasOwnProperty(iter295))
      {
        iter295 = this.success[iter295];
        iter295.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args = function(args) {
  this.tableName = null;
  this.rows = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rows !== undefined) {
      this.rows = args.rows;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_getRowsWithColumnsTs_args.prototype = {};
Hbase_getRowsWithColumnsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.rows = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = input.readString();
          this.rows.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size303 = 0;
        var _rtmp3307;
        this.columns = [];
        var _etype306 = 0;
        _rtmp3307 = input.readListBegin();
        _etype306 = _rtmp3307.etype;
        _size303 = _rtmp3307.size;
        for (var _i308 = 0; _i308 < _size303; ++_i308)
        {
          var elem309 = null;
          elem309 = input.readString();
          this.columns.push(elem309);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size310 = 0;
        var _rtmp3314;
        this.attributes = {};
        var _ktype311 = 0;
        var _vtype312 = 0;
        _rtmp3314 = input.readMapBegin();
        _ktype311 = _rtmp3314.ktype;
        _vtype312 = _rtmp3314.vtype;
        _size310 = _rtmp3314.size;
        for (var _i315 = 0; _i315 < _size310; ++_i315)
        {
          var key316 = null;
          var val317 = null;
          key316 = input.readString();
          val317 = input.readString();
          this.attributes[key316] = val317;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.rows.length);
    for (var iter318 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter318))
      {
        iter318 = this.rows[iter318];
        output.writeString(iter318);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter319 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter319))
      {
        iter319 = this.columns[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter320 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter320))
      {
        var viter321 = this.attributes[kiter320];
        output.writeString(kiter320);
        output.writeString(viter321);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowsWithColumnsTs_result.prototype = {};
Hbase_getRowsWithColumnsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size322 = 0;
        var _rtmp3326;
        this.success = [];
        var _etype325 = 0;
        _rtmp3326 = input.readListBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = new ttypes.TRowResult();
          elem328.read(input);
          this.success.push(elem328);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowsWithColumnsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowsWithColumnsTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter329 in this.success)
    {
      if (this.success.hasOwnProperty(iter329))
      {
        iter329 = this.success[iter329];
        iter329.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRow_args.prototype = {};
Hbase_mutateRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.mutations = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new ttypes.Mutation();
          elem336.read(input);
          this.mutations.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size337 = 0;
        var _rtmp3341;
        this.attributes = {};
        var _ktype338 = 0;
        var _vtype339 = 0;
        _rtmp3341 = input.readMapBegin();
        _ktype338 = _rtmp3341.ktype;
        _vtype339 = _rtmp3341.vtype;
        _size337 = _rtmp3341.size;
        for (var _i342 = 0; _i342 < _size337; ++_i342)
        {
          var key343 = null;
          var val344 = null;
          key343 = input.readString();
          val344 = input.readString();
          this.attributes[key343] = val344;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter345 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter345))
      {
        iter345 = this.mutations[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter346 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter346))
      {
        var viter347 = this.attributes[kiter346];
        output.writeString(kiter346);
        output.writeString(viter347);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRow_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRow_result.prototype = {};
Hbase_mutateRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.mutations = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.mutations !== undefined) {
      this.mutations = args.mutations;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRowTs_args.prototype = {};
Hbase_mutateRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.mutations = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = new ttypes.Mutation();
          elem354.read(input);
          this.mutations.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size355 = 0;
        var _rtmp3359;
        this.attributes = {};
        var _ktype356 = 0;
        var _vtype357 = 0;
        _rtmp3359 = input.readMapBegin();
        _ktype356 = _rtmp3359.ktype;
        _vtype357 = _rtmp3359.vtype;
        _size355 = _rtmp3359.size;
        for (var _i360 = 0; _i360 < _size355; ++_i360)
        {
          var key361 = null;
          var val362 = null;
          key361 = input.readString();
          val362 = input.readString();
          this.attributes[key361] = val362;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.mutations !== null && this.mutations !== undefined) {
    output.writeFieldBegin('mutations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mutations.length);
    for (var iter363 in this.mutations)
    {
      if (this.mutations.hasOwnProperty(iter363))
      {
        iter363 = this.mutations[iter363];
        iter363.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter364 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter364))
      {
        var viter365 = this.attributes[kiter364];
        output.writeString(kiter364);
        output.writeString(viter365);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowTs_result.prototype = {};
Hbase_mutateRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRows_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined) {
      this.rowBatches = args.rowBatches;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRows_args.prototype = {};
Hbase_mutateRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size366 = 0;
        var _rtmp3370;
        this.rowBatches = [];
        var _etype369 = 0;
        _rtmp3370 = input.readListBegin();
        _etype369 = _rtmp3370.etype;
        _size366 = _rtmp3370.size;
        for (var _i371 = 0; _i371 < _size366; ++_i371)
        {
          var elem372 = null;
          elem372 = new ttypes.BatchMutation();
          elem372.read(input);
          this.rowBatches.push(elem372);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size373 = 0;
        var _rtmp3377;
        this.attributes = {};
        var _ktype374 = 0;
        var _vtype375 = 0;
        _rtmp3377 = input.readMapBegin();
        _ktype374 = _rtmp3377.ktype;
        _vtype375 = _rtmp3377.vtype;
        _size373 = _rtmp3377.size;
        for (var _i378 = 0; _i378 < _size373; ++_i378)
        {
          var key379 = null;
          var val380 = null;
          key379 = input.readString();
          val380 = input.readString();
          this.attributes[key379] = val380;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter381 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter381))
      {
        iter381 = this.rowBatches[iter381];
        iter381.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter382 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter382))
      {
        var viter383 = this.attributes[kiter382];
        output.writeString(kiter382);
        output.writeString(viter383);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRows_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRows_result.prototype = {};
Hbase_mutateRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowsTs_args = function(args) {
  this.tableName = null;
  this.rowBatches = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.rowBatches !== undefined) {
      this.rowBatches = args.rowBatches;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_mutateRowsTs_args.prototype = {};
Hbase_mutateRowsTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size384 = 0;
        var _rtmp3388;
        this.rowBatches = [];
        var _etype387 = 0;
        _rtmp3388 = input.readListBegin();
        _etype387 = _rtmp3388.etype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          var elem390 = null;
          elem390 = new ttypes.BatchMutation();
          elem390.read(input);
          this.rowBatches.push(elem390);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size391 = 0;
        var _rtmp3395;
        this.attributes = {};
        var _ktype392 = 0;
        var _vtype393 = 0;
        _rtmp3395 = input.readMapBegin();
        _ktype392 = _rtmp3395.ktype;
        _vtype393 = _rtmp3395.vtype;
        _size391 = _rtmp3395.size;
        for (var _i396 = 0; _i396 < _size391; ++_i396)
        {
          var key397 = null;
          var val398 = null;
          key397 = input.readString();
          val398 = input.readString();
          this.attributes[key397] = val398;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.rowBatches !== null && this.rowBatches !== undefined) {
    output.writeFieldBegin('rowBatches', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.rowBatches.length);
    for (var iter399 in this.rowBatches)
    {
      if (this.rowBatches.hasOwnProperty(iter399))
      {
        iter399 = this.rowBatches[iter399];
        iter399.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter400 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter400))
      {
        var viter401 = this.attributes[kiter400];
        output.writeString(kiter400);
        output.writeString(viter401);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_mutateRowsTs_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_mutateRowsTs_result.prototype = {};
Hbase_mutateRowsTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_mutateRowsTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_mutateRowsTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_atomicIncrement_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.value = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
Hbase_atomicIncrement_args.prototype = {};
Hbase_atomicIncrement_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.value = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I64, 4);
    output.writeI64(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_atomicIncrement_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_atomicIncrement_result.prototype = {};
Hbase_atomicIncrement_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_atomicIncrement_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_atomicIncrement_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAll_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAll_args.prototype = {};
Hbase_deleteAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size402 = 0;
        var _rtmp3406;
        this.attributes = {};
        var _ktype403 = 0;
        var _vtype404 = 0;
        _rtmp3406 = input.readMapBegin();
        _ktype403 = _rtmp3406.ktype;
        _vtype404 = _rtmp3406.vtype;
        _size402 = _rtmp3406.size;
        for (var _i407 = 0; _i407 < _size402; ++_i407)
        {
          var key408 = null;
          var val409 = null;
          key408 = input.readString();
          val409 = input.readString();
          this.attributes[key408] = val409;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter410 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter410))
      {
        var viter411 = this.attributes[kiter410];
        output.writeString(kiter410);
        output.writeString(viter411);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAll_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAll_result.prototype = {};
Hbase_deleteAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAll_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAll_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.column = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.column !== undefined) {
      this.column = args.column;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllTs_args.prototype = {};
Hbase_deleteAllTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size412 = 0;
        var _rtmp3416;
        this.attributes = {};
        var _ktype413 = 0;
        var _vtype414 = 0;
        _rtmp3416 = input.readMapBegin();
        _ktype413 = _rtmp3416.ktype;
        _vtype414 = _rtmp3416.vtype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var key418 = null;
          var val419 = null;
          key418 = input.readString();
          val419 = input.readString();
          this.attributes[key418] = val419;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 3);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter420 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter420))
      {
        var viter421 = this.attributes[kiter420];
        output.writeString(kiter420);
        output.writeString(viter421);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllTs_result.prototype = {};
Hbase_deleteAllTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRow_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllRow_args.prototype = {};
Hbase_deleteAllRow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size422 = 0;
        var _rtmp3426;
        this.attributes = {};
        var _ktype423 = 0;
        var _vtype424 = 0;
        _rtmp3426 = input.readMapBegin();
        _ktype423 = _rtmp3426.ktype;
        _vtype424 = _rtmp3426.vtype;
        _size422 = _rtmp3426.size;
        for (var _i427 = 0; _i427 < _size422; ++_i427)
        {
          var key428 = null;
          var val429 = null;
          key428 = input.readString();
          val429 = input.readString();
          this.attributes[key428] = val429;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter430 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter430))
      {
        var viter431 = this.attributes[kiter430];
        output.writeString(kiter430);
        output.writeString(viter431);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRow_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRow_result.prototype = {};
Hbase_deleteAllRow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRow_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRow_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_increment_args = function(args) {
  this.increment = null;
  if (args) {
    if (args.increment !== undefined) {
      this.increment = args.increment;
    }
  }
};
Hbase_increment_args.prototype = {};
Hbase_increment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.increment = new ttypes.TIncrement();
        this.increment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_args');
  if (this.increment !== null && this.increment !== undefined) {
    output.writeFieldBegin('increment', Thrift.Type.STRUCT, 1);
    this.increment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_increment_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_increment_result.prototype = {};
Hbase_increment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_increment_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_increment_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_incrementRows_args = function(args) {
  this.increments = null;
  if (args) {
    if (args.increments !== undefined) {
      this.increments = args.increments;
    }
  }
};
Hbase_incrementRows_args.prototype = {};
Hbase_incrementRows_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size432 = 0;
        var _rtmp3436;
        this.increments = [];
        var _etype435 = 0;
        _rtmp3436 = input.readListBegin();
        _etype435 = _rtmp3436.etype;
        _size432 = _rtmp3436.size;
        for (var _i437 = 0; _i437 < _size432; ++_i437)
        {
          var elem438 = null;
          elem438 = new ttypes.TIncrement();
          elem438.read(input);
          this.increments.push(elem438);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_args');
  if (this.increments !== null && this.increments !== undefined) {
    output.writeFieldBegin('increments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.increments.length);
    for (var iter439 in this.increments)
    {
      if (this.increments.hasOwnProperty(iter439))
      {
        iter439 = this.increments[iter439];
        iter439.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_incrementRows_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_incrementRows_result.prototype = {};
Hbase_incrementRows_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_incrementRows_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_incrementRows_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRowTs_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_deleteAllRowTs_args.prototype = {};
Hbase_deleteAllRowTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size440 = 0;
        var _rtmp3444;
        this.attributes = {};
        var _ktype441 = 0;
        var _vtype442 = 0;
        _rtmp3444 = input.readMapBegin();
        _ktype441 = _rtmp3444.ktype;
        _vtype442 = _rtmp3444.vtype;
        _size440 = _rtmp3444.size;
        for (var _i445 = 0; _i445 < _size440; ++_i445)
        {
          var key446 = null;
          var val447 = null;
          key446 = input.readString();
          val447 = input.readString();
          this.attributes[key446] = val447;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 3);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter448 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter448))
      {
        var viter449 = this.attributes[kiter448];
        output.writeString(kiter448);
        output.writeString(viter449);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_deleteAllRowTs_result = function(args) {
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_deleteAllRowTs_result.prototype = {};
Hbase_deleteAllRowTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_deleteAllRowTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_deleteAllRowTs_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args = function(args) {
  this.tableName = null;
  this.scan = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.scan !== undefined) {
      this.scan = args.scan;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithScan_args.prototype = {};
Hbase_scannerOpenWithScan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan = new ttypes.TScan();
        this.scan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size450 = 0;
        var _rtmp3454;
        this.attributes = {};
        var _ktype451 = 0;
        var _vtype452 = 0;
        _rtmp3454 = input.readMapBegin();
        _ktype451 = _rtmp3454.ktype;
        _vtype452 = _rtmp3454.vtype;
        _size450 = _rtmp3454.size;
        for (var _i455 = 0; _i455 < _size450; ++_i455)
        {
          var key456 = null;
          var val457 = null;
          key456 = input.readString();
          val457 = input.readString();
          this.attributes[key456] = val457;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.scan !== null && this.scan !== undefined) {
    output.writeFieldBegin('scan', Thrift.Type.STRUCT, 2);
    this.scan.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter458 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter458))
      {
        var viter459 = this.attributes[kiter458];
        output.writeString(kiter458);
        output.writeString(viter459);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithScan_result.prototype = {};
Hbase_scannerOpenWithScan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithScan_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithScan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpen_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpen_args.prototype = {};
Hbase_scannerOpen_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.columns = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = input.readString();
          this.columns.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size467 = 0;
        var _rtmp3471;
        this.attributes = {};
        var _ktype468 = 0;
        var _vtype469 = 0;
        _rtmp3471 = input.readMapBegin();
        _ktype468 = _rtmp3471.ktype;
        _vtype469 = _rtmp3471.vtype;
        _size467 = _rtmp3471.size;
        for (var _i472 = 0; _i472 < _size467; ++_i472)
        {
          var key473 = null;
          var val474 = null;
          key473 = input.readString();
          val474 = input.readString();
          this.attributes[key473] = val474;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter475 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter475))
      {
        iter475 = this.columns[iter475];
        output.writeString(iter475);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter476 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter476))
      {
        var viter477 = this.attributes[kiter476];
        output.writeString(kiter476);
        output.writeString(viter477);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpen_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpen_result.prototype = {};
Hbase_scannerOpen_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpen_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpen_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithStop_args.prototype = {};
Hbase_scannerOpenWithStop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size478 = 0;
        var _rtmp3482;
        this.columns = [];
        var _etype481 = 0;
        _rtmp3482 = input.readListBegin();
        _etype481 = _rtmp3482.etype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var elem484 = null;
          elem484 = input.readString();
          this.columns.push(elem484);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size485 = 0;
        var _rtmp3489;
        this.attributes = {};
        var _ktype486 = 0;
        var _vtype487 = 0;
        _rtmp3489 = input.readMapBegin();
        _ktype486 = _rtmp3489.ktype;
        _vtype487 = _rtmp3489.vtype;
        _size485 = _rtmp3489.size;
        for (var _i490 = 0; _i490 < _size485; ++_i490)
        {
          var key491 = null;
          var val492 = null;
          key491 = input.readString();
          val492 = input.readString();
          this.attributes[key491] = val492;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeString(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter493 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter493))
      {
        iter493 = this.columns[iter493];
        output.writeString(iter493);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter494 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter494))
      {
        var viter495 = this.attributes[kiter494];
        output.writeString(kiter494);
        output.writeString(viter495);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStop_result.prototype = {};
Hbase_scannerOpenWithStop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStop_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStop_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args = function(args) {
  this.tableName = null;
  this.startAndPrefix = null;
  this.columns = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startAndPrefix !== undefined) {
      this.startAndPrefix = args.startAndPrefix;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithPrefix_args.prototype = {};
Hbase_scannerOpenWithPrefix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startAndPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size496 = 0;
        var _rtmp3500;
        this.columns = [];
        var _etype499 = 0;
        _rtmp3500 = input.readListBegin();
        _etype499 = _rtmp3500.etype;
        _size496 = _rtmp3500.size;
        for (var _i501 = 0; _i501 < _size496; ++_i501)
        {
          var elem502 = null;
          elem502 = input.readString();
          this.columns.push(elem502);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size503 = 0;
        var _rtmp3507;
        this.attributes = {};
        var _ktype504 = 0;
        var _vtype505 = 0;
        _rtmp3507 = input.readMapBegin();
        _ktype504 = _rtmp3507.ktype;
        _vtype505 = _rtmp3507.vtype;
        _size503 = _rtmp3507.size;
        for (var _i508 = 0; _i508 < _size503; ++_i508)
        {
          var key509 = null;
          var val510 = null;
          key509 = input.readString();
          val510 = input.readString();
          this.attributes[key509] = val510;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startAndPrefix !== null && this.startAndPrefix !== undefined) {
    output.writeFieldBegin('startAndPrefix', Thrift.Type.STRING, 2);
    output.writeString(this.startAndPrefix);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter511 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter511))
      {
        iter511 = this.columns[iter511];
        output.writeString(iter511);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter512 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter512))
      {
        var viter513 = this.attributes[kiter512];
        output.writeString(kiter512);
        output.writeString(viter513);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithPrefix_result.prototype = {};
Hbase_scannerOpenWithPrefix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithPrefix_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithPrefix_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenTs_args.prototype = {};
Hbase_scannerOpenTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size514 = 0;
        var _rtmp3518;
        this.columns = [];
        var _etype517 = 0;
        _rtmp3518 = input.readListBegin();
        _etype517 = _rtmp3518.etype;
        _size514 = _rtmp3518.size;
        for (var _i519 = 0; _i519 < _size514; ++_i519)
        {
          var elem520 = null;
          elem520 = input.readString();
          this.columns.push(elem520);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size521 = 0;
        var _rtmp3525;
        this.attributes = {};
        var _ktype522 = 0;
        var _vtype523 = 0;
        _rtmp3525 = input.readMapBegin();
        _ktype522 = _rtmp3525.ktype;
        _vtype523 = _rtmp3525.vtype;
        _size521 = _rtmp3525.size;
        for (var _i526 = 0; _i526 < _size521; ++_i526)
        {
          var key527 = null;
          var val528 = null;
          key527 = input.readString();
          val528 = input.readString();
          this.attributes[key527] = val528;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter529 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter529))
      {
        iter529 = this.columns[iter529];
        output.writeString(iter529);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter530 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter530))
      {
        var viter531 = this.attributes[kiter530];
        output.writeString(kiter530);
        output.writeString(viter531);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenTs_result.prototype = {};
Hbase_scannerOpenTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args = function(args) {
  this.tableName = null;
  this.startRow = null;
  this.stopRow = null;
  this.columns = null;
  this.timestamp = null;
  this.attributes = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.startRow !== undefined) {
      this.startRow = args.startRow;
    }
    if (args.stopRow !== undefined) {
      this.stopRow = args.stopRow;
    }
    if (args.columns !== undefined) {
      this.columns = args.columns;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
Hbase_scannerOpenWithStopTs_args.prototype = {};
Hbase_scannerOpenWithStopTs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.startRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stopRow = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size532 = 0;
        var _rtmp3536;
        this.columns = [];
        var _etype535 = 0;
        _rtmp3536 = input.readListBegin();
        _etype535 = _rtmp3536.etype;
        _size532 = _rtmp3536.size;
        for (var _i537 = 0; _i537 < _size532; ++_i537)
        {
          var elem538 = null;
          elem538 = input.readString();
          this.columns.push(elem538);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size539 = 0;
        var _rtmp3543;
        this.attributes = {};
        var _ktype540 = 0;
        var _vtype541 = 0;
        _rtmp3543 = input.readMapBegin();
        _ktype540 = _rtmp3543.ktype;
        _vtype541 = _rtmp3543.vtype;
        _size539 = _rtmp3543.size;
        for (var _i544 = 0; _i544 < _size539; ++_i544)
        {
          var key545 = null;
          var val546 = null;
          key545 = input.readString();
          val546 = input.readString();
          this.attributes[key545] = val546;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.startRow !== null && this.startRow !== undefined) {
    output.writeFieldBegin('startRow', Thrift.Type.STRING, 2);
    output.writeString(this.startRow);
    output.writeFieldEnd();
  }
  if (this.stopRow !== null && this.stopRow !== undefined) {
    output.writeFieldBegin('stopRow', Thrift.Type.STRING, 3);
    output.writeString(this.stopRow);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter547 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter547))
      {
        iter547 = this.columns[iter547];
        output.writeString(iter547);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributes));
    for (var kiter548 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(kiter548))
      {
        var viter549 = this.attributes[kiter548];
        output.writeString(kiter548);
        output.writeString(viter549);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_scannerOpenWithStopTs_result.prototype = {};
Hbase_scannerOpenWithStopTs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerOpenWithStopTs_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerOpenWithStopTs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGet_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Hbase_scannerGet_args.prototype = {};
Hbase_scannerGet_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGet_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGet_result.prototype = {};
Hbase_scannerGet_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size550 = 0;
        var _rtmp3554;
        this.success = [];
        var _etype553 = 0;
        _rtmp3554 = input.readListBegin();
        _etype553 = _rtmp3554.etype;
        _size550 = _rtmp3554.size;
        for (var _i555 = 0; _i555 < _size550; ++_i555)
        {
          var elem556 = null;
          elem556 = new ttypes.TRowResult();
          elem556.read(input);
          this.success.push(elem556);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGet_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGet_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter557 in this.success)
    {
      if (this.success.hasOwnProperty(iter557))
      {
        iter557 = this.success[iter557];
        iter557.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGetList_args = function(args) {
  this.id = null;
  this.nbRows = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.nbRows !== undefined) {
      this.nbRows = args.nbRows;
    }
  }
};
Hbase_scannerGetList_args.prototype = {};
Hbase_scannerGetList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.nbRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.nbRows !== null && this.nbRows !== undefined) {
    output.writeFieldBegin('nbRows', Thrift.Type.I32, 2);
    output.writeI32(this.nbRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerGetList_result = function(args) {
  this.success = null;
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerGetList_result.prototype = {};
Hbase_scannerGetList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size558 = 0;
        var _rtmp3562;
        this.success = [];
        var _etype561 = 0;
        _rtmp3562 = input.readListBegin();
        _etype561 = _rtmp3562.etype;
        _size558 = _rtmp3562.size;
        for (var _i563 = 0; _i563 < _size558; ++_i563)
        {
          var elem564 = null;
          elem564 = new ttypes.TRowResult();
          elem564.read(input);
          this.success.push(elem564);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerGetList_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerGetList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter565 in this.success)
    {
      if (this.success.hasOwnProperty(iter565))
      {
        iter565 = this.success[iter565];
        iter565.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerClose_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
Hbase_scannerClose_args.prototype = {};
Hbase_scannerClose_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_scannerClose_result = function(args) {
  this.io = null;
  this.ia = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args instanceof ttypes.IllegalArgument) {
    this.ia = args;
    return;
  }
  if (args) {
    if (args.io !== undefined) {
      this.io = args.io;
    }
    if (args.ia !== undefined) {
      this.ia = args.ia;
    }
  }
};
Hbase_scannerClose_result.prototype = {};
Hbase_scannerClose_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ia = new ttypes.IllegalArgument();
        this.ia.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_scannerClose_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_scannerClose_result');
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  if (this.ia !== null && this.ia !== undefined) {
    output.writeFieldBegin('ia', Thrift.Type.STRUCT, 2);
    this.ia.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowOrBefore_args = function(args) {
  this.tableName = null;
  this.row = null;
  this.family = null;
  if (args) {
    if (args.tableName !== undefined) {
      this.tableName = args.tableName;
    }
    if (args.row !== undefined) {
      this.row = args.row;
    }
    if (args.family !== undefined) {
      this.family = args.family;
    }
  }
};
Hbase_getRowOrBefore_args.prototype = {};
Hbase_getRowOrBefore_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_args');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 2);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.family !== null && this.family !== undefined) {
    output.writeFieldBegin('family', Thrift.Type.STRING, 3);
    output.writeString(this.family);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRowOrBefore_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRowOrBefore_result.prototype = {};
Hbase_getRowOrBefore_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size566 = 0;
        var _rtmp3570;
        this.success = [];
        var _etype569 = 0;
        _rtmp3570 = input.readListBegin();
        _etype569 = _rtmp3570.etype;
        _size566 = _rtmp3570.size;
        for (var _i571 = 0; _i571 < _size566; ++_i571)
        {
          var elem572 = null;
          elem572 = new ttypes.TCell();
          elem572.read(input);
          this.success.push(elem572);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRowOrBefore_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRowOrBefore_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter573 in this.success)
    {
      if (this.success.hasOwnProperty(iter573))
      {
        iter573 = this.success[iter573];
        iter573.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRegionInfo_args = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined) {
      this.row = args.row;
    }
  }
};
Hbase_getRegionInfo_args.prototype = {};
Hbase_getRegionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_args');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Hbase_getRegionInfo_result = function(args) {
  this.success = null;
  this.io = null;
  if (args instanceof ttypes.IOError) {
    this.io = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.io !== undefined) {
      this.io = args.io;
    }
  }
};
Hbase_getRegionInfo_result.prototype = {};
Hbase_getRegionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TRegionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.io = new ttypes.IOError();
        this.io.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Hbase_getRegionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Hbase_getRegionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.io !== null && this.io !== undefined) {
    output.writeFieldBegin('io', Thrift.Type.STRUCT, 1);
    this.io.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HbaseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
HbaseClient.prototype = {};
HbaseClient.prototype.enableTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_enableTable(tableName);
};

HbaseClient.prototype.send_enableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_enableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_enableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_enableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.disableTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_disableTable(tableName);
};

HbaseClient.prototype.send_disableTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_disableTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_disableTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_disableTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.isTableEnabled = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_isTableEnabled(tableName);
};

HbaseClient.prototype.send_isTableEnabled = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isTableEnabled', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_isTableEnabled_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_isTableEnabled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_isTableEnabled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('isTableEnabled failed: unknown result');
};
HbaseClient.prototype.compact = function(tableNameOrRegionName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_compact(tableNameOrRegionName);
};

HbaseClient.prototype.send_compact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compact', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_compact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_compact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_compact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.majorCompact = function(tableNameOrRegionName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_majorCompact(tableNameOrRegionName);
};

HbaseClient.prototype.send_majorCompact = function(tableNameOrRegionName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('majorCompact', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_majorCompact_args();
  args.tableNameOrRegionName = tableNameOrRegionName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_majorCompact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_majorCompact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.getTableNames = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTableNames();
};

HbaseClient.prototype.send_getTableNames = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableNames', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getTableNames_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableNames = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableNames_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableNames failed: unknown result');
};
HbaseClient.prototype.getColumnDescriptors = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getColumnDescriptors(tableName);
};

HbaseClient.prototype.send_getColumnDescriptors = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getColumnDescriptors', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getColumnDescriptors_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getColumnDescriptors = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getColumnDescriptors_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getColumnDescriptors failed: unknown result');
};
HbaseClient.prototype.getTableRegions = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getTableRegions(tableName);
};

HbaseClient.prototype.send_getTableRegions = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTableRegions', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getTableRegions_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getTableRegions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getTableRegions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTableRegions failed: unknown result');
};
HbaseClient.prototype.createTable = function(tableName, columnFamilies, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_createTable(tableName, columnFamilies);
};

HbaseClient.prototype.send_createTable = function(tableName, columnFamilies) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_createTable_args();
  args.tableName = tableName;
  args.columnFamilies = columnFamilies;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_createTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_createTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.exist) {
    return callback(result.exist);
  }
  callback(null)
};
HbaseClient.prototype.deleteTable = function(tableName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteTable(tableName);
};

HbaseClient.prototype.send_deleteTable = function(tableName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTable', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteTable_args();
  args.tableName = tableName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteTable = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteTable_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.get = function(tableName, row, column, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get(tableName, row, column, attributes);
};

HbaseClient.prototype.send_get = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_get_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_get = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_get_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get failed: unknown result');
};
HbaseClient.prototype.getVer = function(tableName, row, column, numVersions, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getVer(tableName, row, column, numVersions, attributes);
};

HbaseClient.prototype.send_getVer = function(tableName, row, column, numVersions, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVer', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getVer_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.numVersions = numVersions;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVer failed: unknown result');
};
HbaseClient.prototype.getVerTs = function(tableName, row, column, timestamp, numVersions, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getVerTs(tableName, row, column, timestamp, numVersions, attributes);
};

HbaseClient.prototype.send_getVerTs = function(tableName, row, column, timestamp, numVersions, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getVerTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getVerTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.numVersions = numVersions;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getVerTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getVerTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getVerTs failed: unknown result');
};
HbaseClient.prototype.getRow = function(tableName, row, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRow(tableName, row, attributes);
};

HbaseClient.prototype.send_getRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRow_args();
  args.tableName = tableName;
  args.row = row;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRow failed: unknown result');
};
HbaseClient.prototype.getRowWithColumns = function(tableName, row, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowWithColumns(tableName, row, columns, attributes);
};

HbaseClient.prototype.send_getRowWithColumns = function(tableName, row, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowWithColumns_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowTs = function(tableName, row, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowTs(tableName, row, timestamp, attributes);
};

HbaseClient.prototype.send_getRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowTs failed: unknown result');
};
HbaseClient.prototype.getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowWithColumnsTs(tableName, row, columns, timestamp, attributes);
};

HbaseClient.prototype.send_getRowWithColumnsTs = function(tableName, row, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowWithColumnsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowWithColumnsTs_args();
  args.tableName = tableName;
  args.row = row;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.getRows = function(tableName, rows, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRows(tableName, rows, attributes);
};

HbaseClient.prototype.send_getRows = function(tableName, rows, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRows_args();
  args.tableName = tableName;
  args.rows = rows;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRows failed: unknown result');
};
HbaseClient.prototype.getRowsWithColumns = function(tableName, rows, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowsWithColumns(tableName, rows, columns, attributes);
};

HbaseClient.prototype.send_getRowsWithColumns = function(tableName, rows, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsWithColumns', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowsWithColumns_args();
  args.tableName = tableName;
  args.rows = rows;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsWithColumns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumns failed: unknown result');
};
HbaseClient.prototype.getRowsTs = function(tableName, rows, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowsTs(tableName, rows, timestamp, attributes);
};

HbaseClient.prototype.send_getRowsTs = function(tableName, rows, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowsTs_args();
  args.tableName = tableName;
  args.rows = rows;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsTs failed: unknown result');
};
HbaseClient.prototype.getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes);
};

HbaseClient.prototype.send_getRowsWithColumnsTs = function(tableName, rows, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowsWithColumnsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.tableName = tableName;
  args.rows = rows;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowsWithColumnsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowsWithColumnsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowsWithColumnsTs failed: unknown result');
};
HbaseClient.prototype.mutateRow = function(tableName, row, mutations, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRow(tableName, row, mutations, attributes);
};

HbaseClient.prototype.send_mutateRow = function(tableName, row, mutations, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRow_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowTs = function(tableName, row, mutations, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRowTs(tableName, row, mutations, timestamp, attributes);
};

HbaseClient.prototype.send_mutateRowTs = function(tableName, row, mutations, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.mutations = mutations;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRows = function(tableName, rowBatches, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRows(tableName, rowBatches, attributes);
};

HbaseClient.prototype.send_mutateRows = function(tableName, rowBatches, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRows_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.mutateRowsTs = function(tableName, rowBatches, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_mutateRowsTs(tableName, rowBatches, timestamp, attributes);
};

HbaseClient.prototype.send_mutateRowsTs = function(tableName, rowBatches, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutateRowsTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_mutateRowsTs_args();
  args.tableName = tableName;
  args.rowBatches = rowBatches;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_mutateRowsTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_mutateRowsTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.atomicIncrement = function(tableName, row, column, value, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_atomicIncrement(tableName, row, column, value);
};

HbaseClient.prototype.send_atomicIncrement = function(tableName, row, column, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('atomicIncrement', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_atomicIncrement_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_atomicIncrement = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_atomicIncrement_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('atomicIncrement failed: unknown result');
};
HbaseClient.prototype.deleteAll = function(tableName, row, column, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAll(tableName, row, column, attributes);
};

HbaseClient.prototype.send_deleteAll = function(tableName, row, column, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAll', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAll_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllTs = function(tableName, row, column, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllTs(tableName, row, column, timestamp, attributes);
};

HbaseClient.prototype.send_deleteAllTs = function(tableName, row, column, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllTs_args();
  args.tableName = tableName;
  args.row = row;
  args.column = column;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRow = function(tableName, row, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllRow(tableName, row, attributes);
};

HbaseClient.prototype.send_deleteAllRow = function(tableName, row, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRow', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllRow_args();
  args.tableName = tableName;
  args.row = row;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRow = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRow_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.increment = function(increment, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_increment(increment);
};

HbaseClient.prototype.send_increment = function(increment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('increment', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_increment_args();
  args.increment = increment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_increment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_increment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.incrementRows = function(increments, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_incrementRows(increments);
};

HbaseClient.prototype.send_incrementRows = function(increments) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('incrementRows', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_incrementRows_args();
  args.increments = increments;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_incrementRows = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_incrementRows_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.deleteAllRowTs = function(tableName, row, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteAllRowTs(tableName, row, timestamp, attributes);
};

HbaseClient.prototype.send_deleteAllRowTs = function(tableName, row, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAllRowTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_deleteAllRowTs_args();
  args.tableName = tableName;
  args.row = row;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_deleteAllRowTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_deleteAllRowTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  callback(null)
};
HbaseClient.prototype.scannerOpenWithScan = function(tableName, scan, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithScan(tableName, scan, attributes);
};

HbaseClient.prototype.send_scannerOpenWithScan = function(tableName, scan, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithScan', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithScan_args();
  args.tableName = tableName;
  args.scan = scan;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithScan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithScan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithScan failed: unknown result');
};
HbaseClient.prototype.scannerOpen = function(tableName, startRow, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpen(tableName, startRow, columns, attributes);
};

HbaseClient.prototype.send_scannerOpen = function(tableName, startRow, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpen', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpen_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpen = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpen_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpen failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithStop(tableName, startRow, stopRow, columns, attributes);
};

HbaseClient.prototype.send_scannerOpenWithStop = function(tableName, startRow, stopRow, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStop', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithStop_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStop failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes);
};

HbaseClient.prototype.send_scannerOpenWithPrefix = function(tableName, startAndPrefix, columns, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithPrefix', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.tableName = tableName;
  args.startAndPrefix = startAndPrefix;
  args.columns = columns;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithPrefix = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithPrefix_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithPrefix failed: unknown result');
};
HbaseClient.prototype.scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenTs(tableName, startRow, columns, timestamp, attributes);
};

HbaseClient.prototype.send_scannerOpenTs = function(tableName, startRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenTs failed: unknown result');
};
HbaseClient.prototype.scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes);
};

HbaseClient.prototype.send_scannerOpenWithStopTs = function(tableName, startRow, stopRow, columns, timestamp, attributes) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerOpenWithStopTs', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.tableName = tableName;
  args.startRow = startRow;
  args.stopRow = stopRow;
  args.columns = columns;
  args.timestamp = timestamp;
  args.attributes = attributes;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerOpenWithStopTs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerOpenWithStopTs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerOpenWithStopTs failed: unknown result');
};
HbaseClient.prototype.scannerGet = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerGet(id);
};

HbaseClient.prototype.send_scannerGet = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGet', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerGet_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGet = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGet_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGet failed: unknown result');
};
HbaseClient.prototype.scannerGetList = function(id, nbRows, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerGetList(id, nbRows);
};

HbaseClient.prototype.send_scannerGetList = function(id, nbRows) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerGetList', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerGetList_args();
  args.id = id;
  args.nbRows = nbRows;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerGetList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerGetList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scannerGetList failed: unknown result');
};
HbaseClient.prototype.scannerClose = function(id, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_scannerClose(id);
};

HbaseClient.prototype.send_scannerClose = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scannerClose', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_scannerClose_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_scannerClose = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_scannerClose_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.ia) {
    return callback(result.ia);
  }
  callback(null)
};
HbaseClient.prototype.getRowOrBefore = function(tableName, row, family, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRowOrBefore(tableName, row, family);
};

HbaseClient.prototype.send_getRowOrBefore = function(tableName, row, family) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRowOrBefore', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRowOrBefore_args();
  args.tableName = tableName;
  args.row = row;
  args.family = family;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRowOrBefore = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRowOrBefore_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRowOrBefore failed: unknown result');
};
HbaseClient.prototype.getRegionInfo = function(row, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRegionInfo(row);
};

HbaseClient.prototype.send_getRegionInfo = function(row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRegionInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new Hbase_getRegionInfo_args();
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HbaseClient.prototype.recv_getRegionInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Hbase_getRegionInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.io) {
    return callback(result.io);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRegionInfo failed: unknown result');
};
HbaseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
HbaseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

HbaseProcessor.prototype.process_enableTable = function(seqid, input, output) {
  var args = new Hbase_enableTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.enableTable(args.tableName, function (err, result) {
    var result = new Hbase_enableTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("enableTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_disableTable = function(seqid, input, output) {
  var args = new Hbase_disableTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.disableTable(args.tableName, function (err, result) {
    var result = new Hbase_disableTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("disableTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_isTableEnabled = function(seqid, input, output) {
  var args = new Hbase_isTableEnabled_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.isTableEnabled(args.tableName, function (err, result) {
    var result = new Hbase_isTableEnabled_result((err != null ? err : {success: result}));
    output.writeMessageBegin("isTableEnabled", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_compact = function(seqid, input, output) {
  var args = new Hbase_compact_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.compact(args.tableNameOrRegionName, function (err, result) {
    var result = new Hbase_compact_result((err != null ? err : {success: result}));
    output.writeMessageBegin("compact", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_majorCompact = function(seqid, input, output) {
  var args = new Hbase_majorCompact_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.majorCompact(args.tableNameOrRegionName, function (err, result) {
    var result = new Hbase_majorCompact_result((err != null ? err : {success: result}));
    output.writeMessageBegin("majorCompact", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getTableNames = function(seqid, input, output) {
  var args = new Hbase_getTableNames_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTableNames(function (err, result) {
    var result = new Hbase_getTableNames_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTableNames", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getColumnDescriptors = function(seqid, input, output) {
  var args = new Hbase_getColumnDescriptors_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getColumnDescriptors(args.tableName, function (err, result) {
    var result = new Hbase_getColumnDescriptors_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getColumnDescriptors", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getTableRegions = function(seqid, input, output) {
  var args = new Hbase_getTableRegions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getTableRegions(args.tableName, function (err, result) {
    var result = new Hbase_getTableRegions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getTableRegions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_createTable = function(seqid, input, output) {
  var args = new Hbase_createTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.createTable(args.tableName, args.columnFamilies, function (err, result) {
    var result = new Hbase_createTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("createTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteTable = function(seqid, input, output) {
  var args = new Hbase_deleteTable_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteTable(args.tableName, function (err, result) {
    var result = new Hbase_deleteTable_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteTable", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_get = function(seqid, input, output) {
  var args = new Hbase_get_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get(args.tableName, args.row, args.column, args.attributes, function (err, result) {
    var result = new Hbase_get_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getVer = function(seqid, input, output) {
  var args = new Hbase_getVer_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getVer(args.tableName, args.row, args.column, args.numVersions, args.attributes, function (err, result) {
    var result = new Hbase_getVer_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getVer", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getVerTs = function(seqid, input, output) {
  var args = new Hbase_getVerTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getVerTs(args.tableName, args.row, args.column, args.timestamp, args.numVersions, args.attributes, function (err, result) {
    var result = new Hbase_getVerTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getVerTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRow = function(seqid, input, output) {
  var args = new Hbase_getRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRow(args.tableName, args.row, args.attributes, function (err, result) {
    var result = new Hbase_getRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowWithColumns(args.tableName, args.row, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_getRowWithColumns_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowWithColumns", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowTs = function(seqid, input, output) {
  var args = new Hbase_getRowTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowTs(args.tableName, args.row, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowWithColumnsTs(args.tableName, args.row, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowWithColumnsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowWithColumnsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRows = function(seqid, input, output) {
  var args = new Hbase_getRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRows(args.tableName, args.rows, args.attributes, function (err, result) {
    var result = new Hbase_getRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowsWithColumns = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumns_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowsWithColumns(args.tableName, args.rows, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_getRowsWithColumns_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowsWithColumns", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowsTs(args.tableName, args.rows, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowsWithColumnsTs = function(seqid, input, output) {
  var args = new Hbase_getRowsWithColumnsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowsWithColumnsTs(args.tableName, args.rows, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_getRowsWithColumnsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowsWithColumnsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRow = function(seqid, input, output) {
  var args = new Hbase_mutateRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRow(args.tableName, args.row, args.mutations, args.attributes, function (err, result) {
    var result = new Hbase_mutateRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRowTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRowTs(args.tableName, args.row, args.mutations, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_mutateRowTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRows = function(seqid, input, output) {
  var args = new Hbase_mutateRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRows(args.tableName, args.rowBatches, args.attributes, function (err, result) {
    var result = new Hbase_mutateRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_mutateRowsTs = function(seqid, input, output) {
  var args = new Hbase_mutateRowsTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.mutateRowsTs(args.tableName, args.rowBatches, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_mutateRowsTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("mutateRowsTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_atomicIncrement = function(seqid, input, output) {
  var args = new Hbase_atomicIncrement_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.atomicIncrement(args.tableName, args.row, args.column, args.value, function (err, result) {
    var result = new Hbase_atomicIncrement_result((err != null ? err : {success: result}));
    output.writeMessageBegin("atomicIncrement", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAll = function(seqid, input, output) {
  var args = new Hbase_deleteAll_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAll(args.tableName, args.row, args.column, args.attributes, function (err, result) {
    var result = new Hbase_deleteAll_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllTs(args.tableName, args.row, args.column, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_deleteAllTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllRow = function(seqid, input, output) {
  var args = new Hbase_deleteAllRow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllRow(args.tableName, args.row, args.attributes, function (err, result) {
    var result = new Hbase_deleteAllRow_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllRow", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_increment = function(seqid, input, output) {
  var args = new Hbase_increment_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.increment(args.increment, function (err, result) {
    var result = new Hbase_increment_result((err != null ? err : {success: result}));
    output.writeMessageBegin("increment", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_incrementRows = function(seqid, input, output) {
  var args = new Hbase_incrementRows_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.incrementRows(args.increments, function (err, result) {
    var result = new Hbase_incrementRows_result((err != null ? err : {success: result}));
    output.writeMessageBegin("incrementRows", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_deleteAllRowTs = function(seqid, input, output) {
  var args = new Hbase_deleteAllRowTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteAllRowTs(args.tableName, args.row, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_deleteAllRowTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteAllRowTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithScan = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithScan_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithScan(args.tableName, args.scan, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithScan_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithScan", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpen = function(seqid, input, output) {
  var args = new Hbase_scannerOpen_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpen(args.tableName, args.startRow, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpen_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpen", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStop = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStop_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithStop(args.tableName, args.startRow, args.stopRow, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithStop_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithStop", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithPrefix = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithPrefix_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithPrefix(args.tableName, args.startAndPrefix, args.columns, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithPrefix_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithPrefix", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenTs(args.tableName, args.startRow, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerOpenWithStopTs = function(seqid, input, output) {
  var args = new Hbase_scannerOpenWithStopTs_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerOpenWithStopTs(args.tableName, args.startRow, args.stopRow, args.columns, args.timestamp, args.attributes, function (err, result) {
    var result = new Hbase_scannerOpenWithStopTs_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerOpenWithStopTs", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerGet = function(seqid, input, output) {
  var args = new Hbase_scannerGet_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerGet(args.id, function (err, result) {
    var result = new Hbase_scannerGet_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerGet", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerGetList = function(seqid, input, output) {
  var args = new Hbase_scannerGetList_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerGetList(args.id, args.nbRows, function (err, result) {
    var result = new Hbase_scannerGetList_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerGetList", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_scannerClose = function(seqid, input, output) {
  var args = new Hbase_scannerClose_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.scannerClose(args.id, function (err, result) {
    var result = new Hbase_scannerClose_result((err != null ? err : {success: result}));
    output.writeMessageBegin("scannerClose", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRowOrBefore = function(seqid, input, output) {
  var args = new Hbase_getRowOrBefore_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRowOrBefore(args.tableName, args.row, args.family, function (err, result) {
    var result = new Hbase_getRowOrBefore_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRowOrBefore", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

HbaseProcessor.prototype.process_getRegionInfo = function(seqid, input, output) {
  var args = new Hbase_getRegionInfo_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.getRegionInfo(args.row, function (err, result) {
    var result = new Hbase_getRegionInfo_result((err != null ? err : {success: result}));
    output.writeMessageBegin("getRegionInfo", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

